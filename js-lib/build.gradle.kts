version = project.extra["kotunil-version"]!!

dependencies {
    project(":kotunil")
    project(":kotunil-generators")
}

val fromDir = "../build/js/packages/kotunil-js-lib"
val distDir = "${layout.projectDirectory}/dist"
tasks.register<Copy>("copyLibs") {
    from(file(fromDir), file("${layout.projectDirectory}/README.md"))
    into(distDir)

    inputs.file("${fromDir}/package.json") //To make this task depend on this file
    logger.quiet("Copying completed")
}

tasks.register<Exec>("publishToGlobalMPM") {
    executable("npm")
    args("publish")
    workingDir(distDir)

    doLast {
        logger.quiet("Installation completed")
    }
}

tasks.register<Delete>("clean") {
    delete(file(distDir))
}

tasks.register<DefaultTask>("build") {
    dependsOn(":kotunil:build")
    dependsOn("copyLibs")
}

val customizePackageJson = tasks.register("customizePackageJson") {
    group = "build"
    description = "Adds kotunil-version and updates version in package.json"

    // The package.json is generated by the jsPublicPackageJson task.
    // We need to run after it.
    mustRunAfter(tasks.named("copyLibs"))

    doLast {
        // The package.json file is located in the $fromDir directory, then copied to dist
        val packageJsonFile = file("dist/package.json")
        if (packageJsonFile.exists()) {
            val json = groovy.json.JsonSlurper().parseText(packageJsonFile.readText())
            @Suppress("UNCHECKED_CAST")
            val content = json as MutableMap<String, Any>

            // 1. Add "kotunil-version" from the project's version
            content["kotunil-version"] = project.version.toString()

            // 2. Set "version" from the "kotunil-js-version" property
            if (project.hasProperty("kotunil-js-version")) {
                content["version"] = project.property("kotunil-js-version") as String
            }

            packageJsonFile.writeText(groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(content)))
            println("Updated ${packageJsonFile.name} with kotunil-version and custom version.")
        } else {
            logger.warn("Warning: ${packageJsonFile.path} not found. Skipping customization.")
        }
    }
}

// Ensure our custom task is run as part of the build process.
tasks.named("build") {
    dependsOn(customizePackageJson)
}
